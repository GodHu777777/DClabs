// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/11/2014 20:54:17"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    fourBitCoparer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module fourBitCoparer_vlg_sample_tst(
	A0,
	A1,
	A2,
	A3,
	B0,
	B1,
	B2,
	B3,
	sampler_tx
);
input  A0;
input  A1;
input  A2;
input  A3;
input  B0;
input  B1;
input  B2;
input  B3;
output sampler_tx;

reg sample;
time current_time;
always @(A0 or A1 or A2 or A3 or B0 or B1 or B2 or B3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module fourBitCoparer_vlg_check_tst (
	E,
	E0,
	E1,
	E2,
	E3,
	L,
	L0,
	L1,
	L2,
	L3,
	S,
	S0,
	S1,
	S2,
	S3,
	sampler_rx
);
input  E;
input  E0;
input  E1;
input  E2;
input  E3;
input  L;
input  L0;
input  L1;
input  L2;
input  L3;
input  S;
input  S0;
input  S1;
input  S2;
input  S3;
input sampler_rx;

reg  E_expected;
reg  E0_expected;
reg  E1_expected;
reg  E2_expected;
reg  E3_expected;
reg  L_expected;
reg  L0_expected;
reg  L1_expected;
reg  L2_expected;
reg  L3_expected;
reg  S_expected;
reg  S0_expected;
reg  S1_expected;
reg  S2_expected;
reg  S3_expected;

reg  E_prev;
reg  E0_prev;
reg  E1_prev;
reg  E2_prev;
reg  E3_prev;
reg  L_prev;
reg  L0_prev;
reg  L1_prev;
reg  L2_prev;
reg  L3_prev;
reg  S_prev;
reg  S0_prev;
reg  S1_prev;
reg  S2_prev;
reg  S3_prev;

reg  E_expected_prev;
reg  L_expected_prev;
reg  S_expected_prev;

reg  last_E_exp;
reg  last_L_exp;
reg  last_S_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:15] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 15'b1;
end

// update real /o prevs

always @(trigger)
begin
	E_prev = E;
	E0_prev = E0;
	E1_prev = E1;
	E2_prev = E2;
	E3_prev = E3;
	L_prev = L;
	L0_prev = L0;
	L1_prev = L1;
	L2_prev = L2;
	L3_prev = L3;
	S_prev = S;
	S0_prev = S0;
	S1_prev = S1;
	S2_prev = S2;
	S3_prev = S3;
end

// update expected /o prevs

always @(trigger)
begin
	E_expected_prev = E_expected;
	L_expected_prev = L_expected;
	S_expected_prev = S_expected;
end



// expected E
initial
begin
	E_expected = 1'bX;
end 

// expected L
initial
begin
	L_expected = 1'bX;
end 

// expected S
initial
begin
	S_expected = 1'bX;
end 
// generate trigger
always @(E_expected or E or E0_expected or E0 or E1_expected or E1 or E2_expected or E2 or E3_expected or E3 or L_expected or L or L0_expected or L0 or L1_expected or L1 or L2_expected or L2 or L3_expected or L3 or S_expected or S or S0_expected or S0 or S1_expected or S1 or S2_expected or S2 or S3_expected or S3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected E = %b | expected E0 = %b | expected E1 = %b | expected E2 = %b | expected E3 = %b | expected L = %b | expected L0 = %b | expected L1 = %b | expected L2 = %b | expected L3 = %b | expected S = %b | expected S0 = %b | expected S1 = %b | expected S2 = %b | expected S3 = %b | ",E_expected_prev,E0_expected_prev,E1_expected_prev,E2_expected_prev,E3_expected_prev,L_expected_prev,L0_expected_prev,L1_expected_prev,L2_expected_prev,L3_expected_prev,S_expected_prev,S0_expected_prev,S1_expected_prev,S2_expected_prev,S3_expected_prev);
	$display("| real E = %b | real E0 = %b | real E1 = %b | real E2 = %b | real E3 = %b | real L = %b | real L0 = %b | real L1 = %b | real L2 = %b | real L3 = %b | real S = %b | real S0 = %b | real S1 = %b | real S2 = %b | real S3 = %b | ",E_prev,E0_prev,E1_prev,E2_prev,E3_prev,L_prev,L0_prev,L1_prev,L2_prev,L3_prev,S_prev,S0_prev,S1_prev,S2_prev,S3_prev);
`endif
	if (
		( E_expected_prev !== 1'bx ) && ( E_prev !== E_expected_prev )
		&& ((E_expected_prev !== last_E_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_E_exp = E_expected_prev;
	end
	if (
		( L_expected_prev !== 1'bx ) && ( L_prev !== L_expected_prev )
		&& ((L_expected_prev !== last_L_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_L_exp = L_expected_prev;
	end
	if (
		( S_expected_prev !== 1'bx ) && ( S_prev !== S_expected_prev )
		&& ((S_expected_prev !== last_S_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_S_exp = S_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module fourBitCoparer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A0;
reg A1;
reg A2;
reg A3;
reg B0;
reg B1;
reg B2;
reg B3;
// wires                                               
wire E;
wire E0;
wire E1;
wire E2;
wire E3;
wire L;
wire L0;
wire L1;
wire L2;
wire L3;
wire S;
wire S0;
wire S1;
wire S2;
wire S3;

wire sampler;                             

// assign statements (if any)                          
fourBitCoparer i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.E(E),
	.E0(E0),
	.E1(E1),
	.E2(E2),
	.E3(E3),
	.L(L),
	.L0(L0),
	.L1(L1),
	.L2(L2),
	.L3(L3),
	.S(S),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3)
);

// A3
initial
begin
	A3 = 1'b0;
end 

// A2
initial
begin
	A2 = 1'b0;
	A2 = #640000 1'b1;
end 

// A1
initial
begin
	A1 = 1'b0;
	A1 = #320000 1'b1;
	A1 = #320000 1'b0;
	A1 = #320000 1'b1;
end 

// A0
initial
begin
	repeat(3)
	begin
		A0 = 1'b0;
		A0 = #160000 1'b1;
		# 160000;
	end
	A0 = 1'b0;
end 

// B3
initial
begin
	repeat(6)
	begin
		B3 = 1'b0;
		B3 = #80000 1'b1;
		# 80000;
	end
	B3 = 1'b0;
end 

// B2
initial
begin
	repeat(12)
	begin
		B2 = 1'b0;
		B2 = #40000 1'b1;
		# 40000;
	end
	B2 = 1'b0;
end 

// B1
always
begin
	B1 = 1'b0;
	B1 = #20000 1'b1;
	#20000;
end 

// B0
always
begin
	B0 = 1'b0;
	B0 = #10000 1'b1;
	#10000;
end 

fourBitCoparer_vlg_sample_tst tb_sample (
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.sampler_tx(sampler)
);

fourBitCoparer_vlg_check_tst tb_out(
	.E(E),
	.E0(E0),
	.E1(E1),
	.E2(E2),
	.E3(E3),
	.L(L),
	.L0(L0),
	.L1(L1),
	.L2(L2),
	.L3(L3),
	.S(S),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.sampler_rx(sampler)
);
endmodule

